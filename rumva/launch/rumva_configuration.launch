<launch>

    <!-- Load robot description and start state publisher-->
    <param name="robot_description" textfile="$(find rumva)/urdf/head_2d.urdf" />
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

            <!-- Load all sensor nodes -->
    <!-- Start RPLIDAR sensor node which provides LaserScan data  -->
    <!-- <node name="rplidarNode" pkg="rplidar_ros" type="rplidarNode" output="screen">
        <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate" type="int" value="115200"/>
        <param name="frame_id" type="string" value="laser"/>
        <param name="inverted" type="bool" value="false"/>
        <param name="angle_compensate" type="bool" value="true"/>
    </node> -->
    <!--  -->
    <include file="$(find realsense2_camera)/launch/rs_camera.launch">
        <arg name="enable_infra"             value="true"/>
        <arg name="filters"                  value="pointcloud"/>
        <arg name="align_depth"              value="true"/>
        <arg name="unite_imu_method"         value="linear_interpolation"/> 
    </include>
    
    <!-- Load IMU for odometry -->
    <!-- <node pkg="odom_node_pkg" type="odom_node_type" name="odom_node" output="screen">
        <param name="odom_param" value="param_value" />
    </node> -->

    <!-- i think cartographer handles this :))) -->
    <!-- <node pkg="transform_configuration_pkg" type="transform_configuration_type" name="transform_configuration_name" output="screen">
        <param name="transform_configuration_param" value="param_value" />
    </node> -->
    
    <!-- Start Google Cartographer node with custom configuration file-->
    <!-- <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" 
        args="
          -configuration_directory
              /home/rob/serial_ws/src/gbot_core/configuration_files
          -configuration_basename gbot_lidar_2d.lua" output="screen">
    </node> -->
    <include file="$(find rtabmap_ros)/launch/rtabmap.launch">
        <arg name="rtabmap_args"       value="--delete_db_on_start"/>
        <arg name="depth_topic"        value="/camera/aligned_depth_to_color/image_raw"/>
        <arg name="rgb_topic"          value="/camera/color/image_raw"/>
        <arg name="camera_info_topic"  value="/camera/color/camera_info"/>
        <arg name="approx_sync"        value="false"/>
        <arg name="odom_frame_id"      value="odom"/>
        <!-- <arg name="imu_topic"          value="/imu/data"/> -->
        <arg name="frame_id"           value="/base_link"/>
        <!-- l515_link -->
        <arg name="wait_imu_to_init"   value="false"/>
    </include>

    <!-- static_transform_publisher x y z yaw pitch roll frame_id child_frame_id  -->
    <!-- static_transform_publisher x y z qx qy qz qw frame_id child_frame_id  -->
    <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster" 
          args="1 0 0 0 0 0 1 camera_color_optical_frame base_link" /> -->

        <node pkg="tf" type="static_transform_publisher" name="static_tf_cam_color_opt_frame" args="0 0 0 0 0 0 base_link camera_color_optical_frame 10" />
        <node pkg="tf" type="static_transform_publisher" name="static_tf_odom" args="0 0 0 0 0 0 base_link odom 10" />

    <!-- IF THE ROBOT IS ORIENTED VERY WEIRDLY THEN THIS MIGHT BE THE PROBLEM: optical_rotate -->
    <!-- <arg name="pi/2" value="1.5707963267948966" />
    <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />
    <node pkg="tf" type="static_transform_publisher" name="camera_base_link"
     args="$(arg optical_rotate) base_link stereo_camera 100" />  -->
    <!--

        launch-prefix="gdb -ex run -/-args"

          ceres_scan_matcher = {
    occupied_space_weight = 1.,
    translation_weight = 10.,
    rotation_weight = 40.,
    ceres_solver_options = {
      use_nonmonotonic_steps = false,
      max_num_iterations = 20,
      num_threads = 1,
    },
  },
    -->

		<!-- Additional node which converts Cartographer map into ROS occupancy grid map. Not used and can be skipped in this case -->
    <!-- <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" type="cartographer_occupancy_grid_node" args="-resolution 0.05" /> -->
    

</launch> 
